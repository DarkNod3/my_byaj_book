import 'dart:math';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:async';
import 'package:my_byaj_book/screens/card/card_screen.dart';
import 'package:my_byaj_book/screens/loan/loan_screen.dart';
import 'package:my_byaj_book/screens/tools/more_tools_screen.dart';
import 'package:my_byaj_book/screens/bill_diary/bill_diary_screen.dart';
import 'package:my_byaj_book/screens/milk_diary/milk_diary_screen.dart';
import 'package:my_byaj_book/screens/work_diary/work_diary_screen.dart';
import 'package:my_byaj_book/screens/history/history_screen.dart';
import 'package:my_byaj_book/screens/contact/contact_detail_screen.dart';
import 'package:my_byaj_book/widgets/bottom_nav/bottom_navigation.dart';
import 'package:my_byaj_book/widgets/header/app_header.dart';
import 'package:my_byaj_book/widgets/navigation/navigation_drawer.dart';
import 'package:my_byaj_book/constants/app_theme.dart';
import 'package:provider/provider.dart';
import 'package:my_byaj_book/providers/nav_preferences_provider.dart';
import 'package:my_byaj_book/providers/transaction_provider.dart';
import 'package:flutter_contacts/flutter_contacts.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';
import 'package:my_byaj_book/screens/contact/edit_contact_screen.dart';
import 'package:my_byaj_book/screens/tools/emi_calculator_screen.dart';
import 'package:my_byaj_book/screens/tools/sip_calculator_screen.dart';
import 'package:my_byaj_book/screens/tools/tax_calculator_screen.dart';
import 'package:my_byaj_book/widgets/notification_badge.dart';
import 'package:intl/intl.dart';
import 'package:my_byaj_book/utils/permission_handler.dart';
import 'package:my_byaj_book/utils/image_picker_helper.dart';
import 'package:url_launcher/url_launcher.dart';
import '../../providers/contact_provider.dart';
import '../../providers/transaction_provider.dart';
import '../../utils/image_picker_helper.dart';
import '../contact/contact_detail_screen.dart';
import '../contact/add_contact_screen.dart';

// Simple lifecycle observer for app state
class AppLifecycleObserver with WidgetsBindingObserver {
  final VoidCallback? onResume;
  final VoidCallback? onPause;
  
  AppLifecycleObserver({this.onResume, this.onPause}) {
    WidgetsBinding.instance.addObserver(this);
  }
  
  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    if (state == AppLifecycleState.resumed) {
      onResume?.call();
    } else if (state == AppLifecycleState.paused) {
      onPause?.call();
    }
  }
  
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
  }
}

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
  
  // Add a static method that can be called from other files to refresh the home screen
  static void refreshHomeContent(BuildContext context) {
    // Find the home screen state
    final homeScreenState = context.findAncestorStateOfType<_HomeScreenState>();
    if (homeScreenState != null) {
      // Try to find HomeContent state to refresh its contacts
      final homeContentState = homeScreenState._findHomeContentState(context);
      if (homeContentState != null) {
        homeContentState.setState(() {
          // Force a complete refresh
          homeContentState._contacts.clear();
          homeContentState._syncContactsWithTransactions();
        });
      }
    }
  }
}

class _HomeScreenState extends State<HomeScreen> {
  int _currentIndex = 0;
  DateTime? _lastBackPressTime;
  
  // App lifecycle observer
  late final AppLifecycleObserver _lifecycleObserver;

  @override
  void initState() {
    super.initState();
    _checkAndCreateAutomaticBackup();
    
    // Immediately start loading data to prevent blank screens
    _loadInitialData();
    
    // Add app lifecycle listener to refresh data when app resumes
    _lifecycleObserver = AppLifecycleObserver(
      onResume: () {
        // Find the HomeContent state and refresh its data
        final homeContentState = _findHomeContentState(context);
        if (homeContentState != null) {
          homeContentState.setState(() {
            homeContentState._contacts.clear();
            homeContentState._syncContactsWithTransactions();
          });
        }
      }
    );
  }
  
  // New method to explicitly handle data loading at startup
  void _loadInitialData() {
    // Find the HomeContent state and refresh its data
    WidgetsBinding.instance.addPostFrameCallback((_) {
      final homeContentState = _findHomeContentState(context);
      if (homeContentState != null) {
        homeContentState.refresh();
      }
    });
  }
  
  @override
  void dispose() {
    _lifecycleObserver.dispose();
    super.dispose();
  }
  
  Future<void> _checkAndCreateAutomaticBackup() async {
    try {
      final transactionProvider = Provider.of<TransactionProvider>(context, listen: false);
      await transactionProvider.createAutomaticBackup();
    } catch (e) {
      // Error during automatic backup - silent in release
    }
  }

  // Handle back button press to exit the app
  Future<bool> _onWillPop() async {
    if (_currentIndex != 0) {
      // If not on the home tab, navigate to home tab
      setState(() {
        _currentIndex = 0;
      });
      return false;
    }
    
    // If we're already on the home tab, check if we should exit
    final now = DateTime.now();
    if (_lastBackPressTime == null || 
        now.difference(_lastBackPressTime!) > const Duration(seconds: 2)) {
      // First back press, show toast and update time
      _lastBackPressTime = now;
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Press back again to exit'),
          duration: Duration(seconds: 2),
        ),
      );
      return false;
    }
    
    // Second back press within 2 seconds, exit the app
    await SystemNavigator.pop();
    return true;
  }

  // Helper method to find HomeContent state
  _HomeContentState? _findHomeContentState(BuildContext context) {
    _HomeContentState? result;
    
    void visitor(Element element) {
      if (element.widget is HomeContent) {
        final state = (element as StatefulElement).state;
        if (state is _HomeContentState) {
          result = state;
        }
      }
      element.visitChildElements(visitor);
    }
    
    context.visitChildElements(visitor);
    return result;
  }

  @override
  Widget build(BuildContext context) {
    final navProvider = Provider.of<NavPreferencesProvider>(context);
    
    // Create a map of screen IDs to screen widgets
    final Map<String, Widget> screenMap = {
      'home': const HomeContent(),
      'loans': const LoanScreen(showAppBar: false),
      'cards': const CardScreen(),
      'bill_diary': const BillDiaryScreen(showAppBar: false),
      'milk_diary': const MilkDiaryScreen(showAppBar: false),
      'work_diary': const WorkDiaryScreen(showAppBar: false),
      'tools': const MoreToolsScreen(),
      'emi_calc': const EmiCalculatorScreen(showAppBar: false),
      'sip_calc': const SipCalculatorScreen(showAppBar: false),
      'tax_calc': const TaxCalculatorScreen(showAppBar: false),
    };
    
    // Get selected screens from navigation preferences
    final List<Widget> selectedScreens = navProvider.selectedNavItems
        .map((item) => screenMap[item.id] ?? const HomeContent())
        .toList();
    
    // Ensure we have at least one screen
    if (selectedScreens.isEmpty) {
      selectedScreens.add(const HomeContent());
    }

    return WillPopScope(
      onWillPop: _onWillPop,
      child: Scaffold(
        drawer: const AppNavigationDrawer(),
        body: Column(
          children: [
            AppHeader(
              title: _getScreenTitle(navProvider),
              showBackButton: false,
              actions: [
                const NotificationBadge(),
                IconButton(
                  icon: const Icon(Icons.history, color: Colors.white, size: 24),
                  tooltip: 'Transaction History',
                  onPressed: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => const HistoryScreen(),
                      ),
                    );
                  },
                ),
              ],
            ),
            Expanded(
              child: _getActiveScreen(selectedScreens),
            ),
          ],
        ),
        bottomNavigationBar: BottomNavBar(
          currentIndex: _currentIndex,
          onTap: (index) {
            // Make sure we don't exceed the available screens
            if (index == 2) {
              // Center button for tools
              setState(() {
                _currentIndex = index;
              });
            } else if (index == 3 || index == 4) {
              // We need to handle positions 3 and 4 specially
              final adjustedIndex = index - 1; // Adjust for the center button
              if (adjustedIndex - 1 < selectedScreens.length) { // -1 because we're 0-indexed
                setState(() {
                  _currentIndex = index;
                });
              }
            } else if (index < selectedScreens.length) {
              // Normal case for positions 0 and 1
              setState(() {
                _currentIndex = index;
              });
            }
          },
        ),
      ),
    );
  }

  String _getScreenTitle(NavPreferencesProvider navProvider) {
    // If we're on the tools button (index 2), return "Tools"
    if (_currentIndex == 2) {
      return 'Tools';
    }
    
    // Get the list of selected nav items
    final navItems = navProvider.selectedNavItems;
    
    // Make sure we don't exceed the list length
    int adjustedIndex;
    if (_currentIndex > 2) {
      adjustedIndex = _currentIndex - 1; // Adjust for the center button
    } else {
      adjustedIndex = _currentIndex;
    }
    
    // Return the title if it exists
    if (adjustedIndex < navItems.length) {
      return navItems[adjustedIndex].title;
    }
    
    return 'My Byaj Book';
  }

  Widget _getActiveScreen(List<Widget> screens) {
    // For the center button (index 2), show the tools screen
    if (_currentIndex == 2) {
      return const MoreToolsScreen();
    }
    
    // For other indices, we need to adjust because of the center button
    int adjustedIndex;
    if (_currentIndex > 2) {
      adjustedIndex = _currentIndex - 1; // Adjust for the center button (index 2)
    } else {
      adjustedIndex = _currentIndex;
    }
    
    // Make sure we don't exceed the list length
    if (adjustedIndex < screens.length) {
      return screens[adjustedIndex];
    } else {
      // Handle the case where adjustedIndex is out of bounds
      return screens.isNotEmpty ? screens.first : const HomeContent();
    }
  }
}

// Add HomeContent widget
class HomeContent extends StatefulWidget {
  const HomeContent({super.key});

  @override
  State<HomeContent> createState() => _HomeContentState();
}

class _HomeContentState extends State<HomeContent> {
  String _searchQuery = '';
  
  // Add the needed variables
  String _sortMode = 'Recent';  // 'Recent', 'High to Low', 'Low to High', 'By Name'
  String _filterMode = 'All';   // 'All', 'You received', 'You paid'
  
  // Cached total values
  double _cachedTotalToGive = 0.0;
  double _cachedTotalToGet = 0.0;
  
  // List for contacts
  final List<Map<String, dynamic>> _contacts = [];
  bool _isInitialized = false;

  // Method to refresh contacts and totals
  void refresh() {
    if (mounted) {
      setState(() {
        // Clear existing contacts to ensure fresh data
        _contacts.clear();
        _syncContactsWithTransactions();
      });
    }
  }

  @override
  void initState() {
    super.initState();
    
    // Delay to ensure the provider is available
    WidgetsBinding.instance.addPostFrameCallback((_) {
      // Clear any existing data first
      _contacts.clear();
      
      // Load fresh data
      _syncContactsWithTransactions();
      
      // Set up a second delayed load to ensure data is properly loaded
      Future.delayed(const Duration(milliseconds: 300), () {
        if (mounted && _contacts.isEmpty) {
          setState(() {
            _syncContactsWithTransactions();
          });
        }
      });
    });
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    // Sync contacts when dependencies change
    if (!_isInitialized) {
      // Clear any existing data first
      _contacts.clear();
      
      // Load fresh data
      _syncContactsWithTransactions();
      _isInitialized = true;
      
      // Set up a delayed second load if needed
      Future.delayed(const Duration(milliseconds: 300), () {
        if (mounted && _contacts.isEmpty) {
          setState(() {
            _syncContactsWithTransactions();
          });
        }
      });
    }
  }

  @override
  void didUpdateWidget(HomeContent oldWidget) {
    super.didUpdateWidget(oldWidget);
    // Force a refresh of data when the widget updates
    _syncContactsWithTransactions();
  }

  // Sync method to load contacts and transactions
  void _syncContactsWithTransactions() {
    if (!mounted) return;
    
    try {
    // Get transaction provider
    final transactionProvider = Provider.of<TransactionProvider>(context, listen: false);
    
    // Get all contacts from the provider
    final allContacts = transactionProvider.contacts;
    if (allContacts.isEmpty) {
      // If there are no contacts in the provider, retry after a short delay
      Future.delayed(const Duration(milliseconds: 300), () {
        if (mounted) {
          setState(() {
            _syncContactsWithTransactions();
          });
        }
      });
      return;
    }
    
      // Reset totals
    _cachedTotalToGive = 0.0;
    _cachedTotalToGet = 0.0;
    
      // Process all contacts
    for (final contact in allContacts) {
      final phone = contact['phone'] ?? '';
      if (phone.isEmpty) continue;
      
        // Calculate balance
      final balance = transactionProvider.calculateBalance(phone);
      
      // Update contact with calculated amount
      contact['amount'] = balance.abs();
      contact['isGet'] = balance >= 0;
      
        // Add to contacts list if not already included
        if (!_contacts.contains(contact)) {
          _contacts.add(contact);
        }
      }
      
      // Apply search and filtering logic
      _applySearchAndFilter();
      
      // Update the UI
      setState(() {});
    } catch (e) {
      // Handle any errors
      print('Error syncing contacts: $e');
    }
  }
  
  // Method to apply search and filtering
  void _applySearchAndFilter() {
    // Sort contacts by lastEditedAt (newest first) as default
    _contacts.sort((a, b) {
      final aTime = a['lastEditedAt'] as DateTime?;
      final bTime = b['lastEditedAt'] as DateTime?;
      if (aTime == null || bTime == null) {
        return 0;
      }
      return bTime.compareTo(aTime);
    });
    
    // Update totals
    _updateCachedTotals();
  }
  
  // Update cached totals
  void _updateCachedTotals() {
    _cachedTotalToGive = 0.0;
    _cachedTotalToGet = 0.0;
    
    for (final contact in _contacts) {
      final amount = contact['amount'] as double? ?? 0.0;
      final isGet = contact['isGet'] as bool? ?? true;
      
      if (isGet) {
        _cachedTotalToGet += amount;
    } else {
        _cachedTotalToGive += amount;
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(
        children: [
          // Summary card at the top
          _buildSummaryCard(),
          
          // Search bar
          _buildSearchBar(),
          
          // Contacts list
        Expanded(
            child: _contacts.isEmpty
                ? _buildEmptyState()
                : _buildContactsList(),
                ),
              ],
            ),
      floatingActionButton: FloatingActionButton(
        onPressed: _showAddContactDialog,
        backgroundColor: Colors.deepPurple,
        child: const Icon(Icons.person_add, color: Colors.white),
          ),
    );
  }

  Widget _buildSummaryCard() {
    return Container(
      padding: const EdgeInsets.all(16),
      margin: const EdgeInsets.fromLTRB(16, 8, 16, 8),
      decoration: BoxDecoration(
        color: Colors.deepPurple,
              borderRadius: BorderRadius.circular(12),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceAround,
        children: [
          // You Will Pay section
          Column(
                  children: [
                    Row(
                      children: [
                  const Icon(Icons.arrow_upward, color: Colors.white, size: 16),
                  const SizedBox(width: 4),
                  const Text('You Will Pay', style: TextStyle(color: Colors.white, fontSize: 14)),
                      ],
                    ),
                      const SizedBox(height: 8),
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                      decoration: BoxDecoration(
                  color: Colors.grey.shade300,
                  borderRadius: BorderRadius.circular(8),
                      ),
                      child: Text(
                  '₹ ${_cachedTotalToGive.toStringAsFixed(2)}',
                  style: const TextStyle(fontWeight: FontWeight.bold),
                ),
                  ),
                ],
              ),
          
          // Vertical divider
          Container(width: 1, height: 40, color: Colors.white.withOpacity(0.5)),
          
          // You Will Receive section
          Column(
                  children: [
                    Row(
                      children: [
                  const Icon(Icons.arrow_downward, color: Colors.white, size: 16),
                  const SizedBox(width: 4),
                  const Text('You Will Receive', style: TextStyle(color: Colors.white, fontSize: 14)),
                      ],
                    ),
                      const SizedBox(height: 8),
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                      decoration: BoxDecoration(
                  color: Colors.grey.shade300,
                  borderRadius: BorderRadius.circular(8),
                      ),
                      child: Text(
                  '₹ ${_cachedTotalToGet.toStringAsFixed(2)}',
                  style: const TextStyle(fontWeight: FontWeight.bold),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
  
  Widget _buildSearchBar() {
    return Container(
      margin: const EdgeInsets.fromLTRB(16, 0, 16, 8),
      decoration: BoxDecoration(
        color: Colors.grey.shade200,
        borderRadius: BorderRadius.circular(30),
      ),
      child: TextField(
        onChanged: (value) {
          setState(() {
            _searchQuery = value;
            _contacts.clear();
            _syncContactsWithTransactions();
          });
        },
        decoration: InputDecoration(
          hintText: 'Search contacts...',
          prefixIcon: const Icon(Icons.search, color: Colors.grey),
          border: InputBorder.none,
          contentPadding: const EdgeInsets.symmetric(vertical: 15),
          suffixIcon: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              IconButton(
                icon: const Icon(Icons.sort, color: Colors.grey),
                onPressed: _showSortOptions,
              ),
            ],
          ),
        ),
      ),
    );
  }
  
  Widget _buildEmptyState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(Icons.people_alt_outlined, size: 80, color: Colors.grey.shade400),
          const SizedBox(height: 16),
          Text(
            'No contacts yet',
            style: TextStyle(fontSize: 18, color: Colors.grey.shade600, fontWeight: FontWeight.bold),
                    ),
                      const SizedBox(height: 8),
          Text(
            'Add a contact to track your payments',
            style: TextStyle(fontSize: 14, color: Colors.grey.shade600),
          ),
          const SizedBox(height: 24),
          ElevatedButton.icon(
            onPressed: _showAddContactDialog,
            icon: const Icon(Icons.person_add),
            label: const Text('Add Contact'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.deepPurple,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
              ),
            ),
          ],
      ),
    );
  }
  
  Widget _buildContactsList() {
    // Generate consistent colors for avatars
    final List<Color> avatarColors = [
      Colors.red.shade400,
      Colors.blue.shade400,
      Colors.green.shade400,
      Colors.amber.shade400,
      Colors.purple.shade400,
      Colors.teal.shade400,
      Colors.orange.shade400,
      Colors.pink.shade400,
    ];

    return ListView.builder(
      itemCount: _contacts.length,
      padding: const EdgeInsets.only(bottom: 80), // Space for FAB
      itemBuilder: (context, index) {
        final contact = _contacts[index];
        final name = contact['name'] as String? ?? 'Unknown';
        final phone = contact['phone'] as String? ?? '';
        final amount = contact['amount'] as double? ?? 0.0;
        final isGet = contact['isGet'] as bool? ?? true;
        
        // Create initials for avatar
        final initials = name.isNotEmpty ? name[0].toUpperCase() : 'U';
        
        // Get a deterministic color based on the name
        final colorIndex = name.isEmpty ? 0 : name.codeUnitAt(0) % avatarColors.length;
        final avatarColor = avatarColors[colorIndex];
        
        return ListTile(
          onTap: () => _navigateToContactDetails(contact),
          contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
          leading: CircleAvatar(
            backgroundColor: avatarColor,
            radius: 20,
            child: Text(
              initials, 
              style: const TextStyle(
                color: Colors.white, 
                fontWeight: FontWeight.bold,
                fontSize: 16,
              ),
            ),
          ),
          title: Text(
            name,
            style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
          ),
          subtitle: Text(
            phone.isNotEmpty ? phone : '',
            style: TextStyle(color: Colors.grey.shade600, fontSize: 13),
          ),
          trailing: Container(
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
            decoration: BoxDecoration(
              color: isGet ? Colors.green.shade100 : Colors.red.shade100,
              borderRadius: BorderRadius.circular(20),
            ),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                Icon(
                  isGet ? Icons.arrow_downward : Icons.arrow_upward,
                  size: 16,
                  color: isGet ? Colors.green : Colors.red,
                ),
                const SizedBox(width: 4),
                Text(
                  '₹${amount.toStringAsFixed(2)}',
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    color: isGet ? Colors.green : Colors.red,
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }
  
  String _getTimeAgo(DateTime dateTime) {
    final now = DateTime.now();
    final difference = now.difference(dateTime);
    
    if (difference.inDays > 365) {
      return '${(difference.inDays / 365).floor()} year(s) ago';
    } else if (difference.inDays > 30) {
      return '${(difference.inDays / 30).floor()} month(s) ago';
    } else if (difference.inDays > 0) {
      return '${difference.inDays} day(s) ago';
    } else if (difference.inHours > 0) {
      return '${difference.inHours} hour(s) ago';
    } else if (difference.inMinutes > 0) {
      return '${difference.inMinutes} min ago';
    } else {
      return 'Just now';
    }
  }
  
  void _showSortOptions() {
    showModalBottomSheet(
      context: context,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) => Padding(
        padding: const EdgeInsets.symmetric(vertical: 20),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text(
              'Sort by',
              style: TextStyle(fontWeight: FontWeight.bold, fontSize: 18),
            ),
            const SizedBox(height: 20),
            _buildSortOption('Recent', Icons.access_time),
            _buildSortOption('High to Low', Icons.arrow_downward),
            _buildSortOption('Low to High', Icons.arrow_upward),
            _buildSortOption('By Name', Icons.sort_by_alpha),
          ],
        ),
      ),
    );
  }
  
  Widget _buildSortOption(String title, IconData icon) {
    final isSelected = _sortMode == title;
    
    return ListTile(
      leading: Icon(icon, color: isSelected ? Colors.deepPurple : Colors.grey),
      title: Text(
                title,
                style: TextStyle(
                  fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
          color: isSelected ? Colors.deepPurple : Colors.black,
        ),
      ),
      trailing: isSelected ? const Icon(Icons.check, color: Colors.deepPurple) : null,
      onTap: () {
                    setState(() {
          _sortMode = title;
          Navigator.pop(context);
          _contacts.clear();
          _syncContactsWithTransactions();
                    });
                  },
    );
  }
  
  void _showAddContactDialog() {
    Navigator.of(context).push(
      MaterialPageRoute(
        builder: (context) => Scaffold(
          appBar: AppBar(
            title: const Text('Add Contact'),
            backgroundColor: Colors.deepPurple,
            leading: IconButton(
              icon: const Icon(Icons.arrow_back),
              onPressed: () => Navigator.pop(context),
            ),
          ),
          body: Column(
            children: [
              Container(
                margin: const EdgeInsets.fromLTRB(16, 10, 16, 8),
                decoration: BoxDecoration(
                  color: Colors.grey.shade200,
                  borderRadius: BorderRadius.circular(30),
                ),
                child: TextField(
                  decoration: InputDecoration(
                    hintText: 'Search contacts...',
                    prefixIcon: const Icon(Icons.search, color: Colors.grey),
                    border: InputBorder.none,
                    contentPadding: const EdgeInsets.symmetric(vertical: 15),
                  ),
                ),
              ),
              ListTile(
                leading: CircleAvatar(
                  backgroundColor: Colors.deepPurple.shade100,
                  child: const Icon(Icons.add, color: Colors.deepPurple),
                ),
                title: const Text(
                  'Create New Contact',
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    color: Colors.deepPurple,
                  ),
                ),
                trailing: const Icon(Icons.chevron_right, color: Colors.deepPurple),
                onTap: () {
                  Navigator.pop(context);
                  Navigator.of(context).push(
                    MaterialPageRoute(
                      builder: (context) => AddContactScreen(
                        onContactAdded: (contact) {
                          setState(() {
                            _contacts.clear();
                            _syncContactsWithTransactions();
                          });
                          
                          // Show success message
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(content: Text('${contact['name']} added successfully')),
                          );
                        },
                      ),
                    ),
                  );
                },
              ),
              Expanded(
                child: _buildContactSelectionList(),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildContactSelectionList() {
    // Generate consistent colors for avatars
    final List<Color> avatarColors = [
      Colors.red.shade400,
      Colors.blue.shade400,
      Colors.green.shade400,
      Colors.amber.shade400,
      Colors.purple.shade400,
      Colors.teal.shade400,
      Colors.orange.shade400,
      Colors.pink.shade400,
    ];

    return ListView.builder(
      itemCount: _contacts.length,
      padding: const EdgeInsets.only(bottom: 80),
      itemBuilder: (context, index) {
        final contact = _contacts[index];
        final name = contact['name'] as String? ?? 'Unknown';
        final phone = contact['phone'] as String? ?? '';
        
        // Create initials for avatar
        final initials = name.isNotEmpty ? name[0].toUpperCase() : 'U';
        
        // Get a deterministic color based on the name
        final colorIndex = name.isEmpty ? 0 : name.codeUnitAt(0) % avatarColors.length;
        final avatarColor = avatarColors[colorIndex];
        
        return ListTile(
          onTap: () {
            Navigator.pop(context);
            _navigateToContactDetails(contact);
          },
          contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
          leading: CircleAvatar(
            backgroundColor: avatarColor,
            radius: 20,
            child: Text(
              initials, 
              style: const TextStyle(
                color: Colors.white, 
                fontWeight: FontWeight.bold,
                fontSize: 16,
              ),
            ),
          ),
          title: Text(
            name,
            style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
          ),
          subtitle: Text(
            phone.isNotEmpty ? phone : '',
            style: TextStyle(color: Colors.grey.shade600, fontSize: 13),
          ),
        );
      },
    );
  }
  
  void _navigateToContactDetails(Map<String, dynamic> contact) {
    Navigator.push(
      context, 
      MaterialPageRoute(
        builder: (context) => ContactDetailPage(contact: contact),
      ),
    ).then((_) {
      // Refresh contacts when returning from details page
      setState(() {
        _contacts.clear();
        _syncContactsWithTransactions();
      });
    });
  }
}

// Add ContactDetailPage at the end of the file
class ContactDetailPage extends StatefulWidget {
  final Map<String, dynamic> contact;
  
  const ContactDetailPage({
    Key? key,
    required this.contact,
  }) : super(key: key);
  
  @override
  State<ContactDetailPage> createState() => _ContactDetailPageState();
}

class _ContactDetailPageState extends State<ContactDetailPage> {
  bool _showInterestMode = false;
  List<Map<String, dynamic>> _transactions = [];
  List<Map<String, dynamic>> _filteredTransactions = [];
  double _totalAmount = 0.0;
  bool _isGet = true;
  final currencyFormat = NumberFormat.currency(locale: 'en_IN', symbol: '₹');
  
  // Add selected tab
  String _selectedTab = 'Normal'; // 'Normal' or 'Interest'
  
  // Add filter state
  String _selectedFilter = 'All'; // 'All', 'Received', 'Paid'
  
  @override
  void initState() {
    super.initState();
    _loadTransactions();
  }
  
  void _loadTransactions() {
    final transactionProvider = Provider.of<TransactionProvider>(context, listen: false);
    final phone = widget.contact['phone'] as String? ?? '';
    
    if (phone.isNotEmpty) {
      setState(() {
        _transactions = transactionProvider.getTransactionsForContact(phone);
        
        // Sort transactions by date (newest first)
        _transactions.sort((a, b) {
          final dateA = a['date'] as DateTime? ?? DateTime.now();
          final dateB = b['date'] as DateTime? ?? DateTime.now();
          return dateB.compareTo(dateA); // Descending order
        });
        
        _totalAmount = widget.contact['amount'] as double? ?? 0.0;
        _isGet = widget.contact['isGet'] as bool? ?? true;
        _filterTransactions(); // Filter transactions based on selected tab and filter
      });
    }
  }
  
  // Modify method to filter transactions based on tab and filter
  void _filterTransactions() {
    // First filter by tab (Normal/Interest)
    var filtered = _transactions.where((tx) {
      final hasInterest = tx['hasInterest'] as bool? ?? false;
      return _selectedTab == 'Normal' ? !hasInterest : hasInterest;
    }).toList();
    
    // Then apply additional filter (All/Received/Paid)
    if (_selectedFilter == 'Received') {
      filtered = filtered.where((tx) => tx['isGet'] as bool? ?? false).toList();
    } else if (_selectedFilter == 'Paid') {
      filtered = filtered.where((tx) => !(tx['isGet'] as bool? ?? false)).toList();
    }
    
    setState(() {
      _filteredTransactions = filtered;
    });
  }
  
  // Add method to handle filter selection
  void _selectFilter(String filterName) {
          setState(() {
      _selectedFilter = filterName;
      _filterTransactions();
    });
  }
  
  // Add method to handle tab selection
  void _selectTab(String tabName) {
    setState(() {
      _selectedTab = tabName;
      _filterTransactions();
      // Force rebuild of the summary card by triggering a state update
    });
  }
  
  @override
  Widget build(BuildContext context) {
    final name = widget.contact['name'] as String? ?? 'Unknown';
    final initials = name.isNotEmpty ? name[0].toUpperCase() : 'U';
    
    // Truncate name if longer than 15 chars
    final displayName = name.length > 15 ? '${name.substring(0, 15)}...' : name;
    
    return Scaffold(
      appBar: AppBar(
        title: Row(
      children: [
            CircleAvatar(
              backgroundColor: Colors.white,
              child: Text(
                initials,
                style: const TextStyle(color: Colors.deepPurple),
              ),
            ),
            const SizedBox(width: 12),
        Expanded(
              child: Text(
                displayName,
                overflow: TextOverflow.ellipsis,
              ),
            ),
          ],
        ),
        backgroundColor: Colors.deepPurple,
        actions: [
          IconButton(
            icon: const Icon(Icons.edit),
            onPressed: () => _editContact(),
          ),
          IconButton(
            icon: const Icon(Icons.delete),
            onPressed: () => _confirmDeleteContact(),
          ),
        ],
      ),
      body: Column(
                children: [
          // Summary card
          _buildSummaryCard(),
          
          // Add transaction filtering tabs with reduced padding
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 12.0, vertical: 6.0),
            child: Container(
      decoration: BoxDecoration(
                color: Colors.grey.shade200,
                borderRadius: BorderRadius.circular(30),
              ),
              child: Row(
                    children: [
                  Expanded(
                    child: GestureDetector(
                      onTap: () => _selectTab('Normal'),
                        child: Container(
                        padding: const EdgeInsets.symmetric(vertical: 10),
                          decoration: BoxDecoration(
                          color: _selectedTab == 'Normal' ? Colors.white : Colors.transparent,
                          borderRadius: BorderRadius.circular(30),
                          boxShadow: _selectedTab == 'Normal' ? [
                              BoxShadow(
                              color: Colors.grey.withOpacity(0.3),
                              spreadRadius: 0,
                  blurRadius: 4,
                                offset: const Offset(0, 1),
                              ),
                          ] : null,
                          ),
                            child: Text(
                          'Normal',
                          textAlign: TextAlign.center,
                          style: TextStyle(
                                fontWeight: FontWeight.bold,
                            color: _selectedTab == 'Normal' ? Colors.black : Colors.grey.shade700,
                              ),
                            ),
                          ),
                        ),
                      ),
                      Expanded(
                    child: GestureDetector(
                      onTap: () => _selectTab('Interest'),
                      child: Container(
                        padding: const EdgeInsets.symmetric(vertical: 10),
                        decoration: BoxDecoration(
                          color: _selectedTab == 'Interest' ? Colors.white : Colors.transparent,
                          borderRadius: BorderRadius.circular(30),
                          boxShadow: _selectedTab == 'Interest' ? [
                  BoxShadow(
                              color: Colors.grey.withOpacity(0.3),
                              spreadRadius: 0,
                    blurRadius: 4,
                              offset: const Offset(0, 1),
                            ),
                          ] : null,
                        ),
                        child: Text(
                          'Interest',
                          textAlign: TextAlign.center,
                          style: TextStyle(
                                fontWeight: FontWeight.bold,
                            color: _selectedTab == 'Interest' ? Colors.black : Colors.grey.shade700,
                          ),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
          
          // Add filter row
          Padding(
            padding: const EdgeInsets.fromLTRB(12.0, 0, 12.0, 6.0),
                                    child: Row(
                                      children: [
                _buildFilterChip('All'),
                const SizedBox(width: 8),
                _buildFilterChip('Received'),
                const SizedBox(width: 8),
                _buildFilterChip('Paid'),
                const Spacer(),
                // Sort indicator
                Row(
                  children: [
                    Icon(Icons.arrow_upward, size: 14, color: Colors.grey.shade700),
                                        const SizedBox(width: 2),
                                        Text(
                      'Newest first',
                                          style: TextStyle(
                        fontSize: 12,
                        color: Colors.grey.shade700,
                                          ),
                                        ),
                                      ],
                ),
              ],
            ),
          ),
          
          // Transactions list - use filtered transactions
          Expanded(
            child: _filteredTransactions.isEmpty
                ? _buildEmptyTransactionState()
                : _buildTransactionList(),
                            ),
                          ],
                        ),
      bottomNavigationBar: Container(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        child: Row(
            children: [
              Expanded(
              child: MaterialButton(
                onPressed: () => _showTransactionDialog(false),
                color: Colors.red,
                textColor: Colors.white,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(30),
                ),
                padding: const EdgeInsets.symmetric(vertical: 15),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                    const Icon(Icons.arrow_upward, size: 20),
                          const SizedBox(width: 8),
                const Text(
                      'PAID',
                              style: TextStyle(
                    fontSize: 16,
                                fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                    ),
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: MaterialButton(
                onPressed: () => _showTransactionDialog(true),
                color: Colors.green,
                textColor: Colors.white,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(30),
                ),
                padding: const EdgeInsets.symmetric(vertical: 15),
                            child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                    const Icon(Icons.arrow_downward, size: 20),
                    const SizedBox(width: 8),
                const Text(
                      'RECEIVED',
                                  style: TextStyle(
                    fontSize: 16,
                          fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ],
                            ),
                          ),
                      ),
                    ],
                  ),
      ),
    );
  }

  Widget _buildSummaryCard() {
    // Use proper color based on whether it's get or pay
    final cardColor = _isGet 
        ? const Color(0xFF4CAF50) // Proper green for receive
        : const Color(0xFFEF9A9A); // Light red for pay
    
    // Calculate interest-related values
    double totalInterestAmount = 0.0;
    double totalPrincipal = 0.0;
    double avgInterestRate = 0.0;
    int interestTransactions = 0;
    
    // Calculate interest stats from transactions
    for (final tx in _transactions) {
      final hasInterest = tx['hasInterest'] as bool? ?? false;
      final amount = tx['amount'] as double? ?? 0.0;
      
      if (hasInterest) {
        interestTransactions++;
        totalPrincipal += amount;
        final interestRate = tx['interestRate'] as double? ?? 0.0;
        avgInterestRate += interestRate;
        
        // Calculate estimated interest based on rate and tenure
        final interestPeriod = tx['interestPeriod'] as String? ?? 'Month';
        final tenureMonths = tx['tenureMonths'] as int? ?? 3;
        final annualRate = interestPeriod == 'Year' ? interestRate : interestRate * 12;
        
        // Simple interest calculation (not compounded)
        final interestAmount = amount * (annualRate / 100) * (tenureMonths / 12);
        totalInterestAmount += interestAmount;
      }
    }
    
    // Calculate average interest rate
    if (interestTransactions > 0) {
      avgInterestRate = avgInterestRate / interestTransactions;
    }
    
    final totalWithInterest = totalPrincipal + totalInterestAmount;
    
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.symmetric(vertical: 14, horizontal: 16),
      margin: const EdgeInsets.fromLTRB(12, 10, 12, 6),
      decoration: BoxDecoration(
        color: cardColor,
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(
                _isGet ? Icons.monetization_on_outlined : Icons.payments_outlined, 
                color: Colors.white,
                size: 18
              ),
              const SizedBox(width: 6),
              Text(
                _isGet ? 'You Will RECEIVE' : 'You Will PAY',
                style: const TextStyle(
                  fontSize: 13,
                  fontWeight: FontWeight.w500,
                  color: Colors.white,
                ),
              ),
              const Spacer(),
              const Icon(Icons.info_outline, color: Colors.white, size: 16),
            ],
          ),
          const SizedBox(height: 4),
          Text(
            currencyFormat.format(_totalAmount),
            style: const TextStyle(
              fontSize: 28,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          
          // Show different summary information based on selected tab
          if (_selectedTab == 'Interest' && interestTransactions > 0) ...[
            // Interest details
            const SizedBox(height: 8),
            const Divider(height: 1, color: Colors.white30),
            const SizedBox(height: 8),
            
            // Interest rate
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                const Text(
                  'Avg Interest Rate:',
                  style: TextStyle(
                    fontSize: 12,
                    color: Colors.white70,
                  ),
                ),
                Text(
                  '${avgInterestRate.toStringAsFixed(2)}%',
                  style: const TextStyle(
                    fontSize: 12,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 4),
            
            // Principal amount
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                const Text(
                  'Principal Amount:',
                  style: TextStyle(
                    fontSize: 12,
                    color: Colors.white70,
                  ),
                ),
                Text(
                  currencyFormat.format(totalPrincipal),
                  style: const TextStyle(
                    fontSize: 12,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 4),
            
            // Interest amount
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                const Text(
                  'Total Interest:',
                  style: TextStyle(
                    fontSize: 12,
                    color: Colors.white70,
                  ),
                ),
                Text(
                  currencyFormat.format(totalInterestAmount),
                  style: const TextStyle(
                    fontSize: 12,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 4),
            
            // Total with interest
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                const Text(
                  'Total with Interest:',
                  style: TextStyle(
                    fontSize: 12,
                    color: Colors.white70,
                  ),
                ),
                Text(
                  currencyFormat.format(totalWithInterest),
                  style: const TextStyle(
                    fontSize: 12,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
              ],
            ),
          ] else ...[
            // Normal transaction info - use spread operator here too
            const SizedBox(height: 2),
            Text(
              'Last updated: ${DateFormat('dd MMM yyyy').format(DateTime.now())}',
              style: const TextStyle(
                fontSize: 11,
                color: Colors.white70,
              ),
            ),
          ],
          
          const SizedBox(height: 12),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              _buildActionButton(
                Icons.call,
                'Call',
                Colors.blue,
                () => _makeCall(),
              ),
              _buildActionButton(
                Icons.picture_as_pdf,
                'PDF Report',
                Colors.red,
                () => _generatePdfReport(),
              ),
              _buildActionButton(
                Icons.notifications,
                'Reminder',
                Colors.orange,
                () => _setReminder(),
              ),
              _buildActionButton(
                Icons.sms,
                'SMS',
                Colors.green,
                () => _sendSms(),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildActionButton(IconData icon, String label, Color color, Function() onTap) {
    return InkWell(
      onTap: onTap,
      borderRadius: BorderRadius.circular(8),
                child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
                        Container(
                            padding: const EdgeInsets.all(8),
                          decoration: BoxDecoration(
            color: color,
                shape: BoxShape.circle,
                          ),
            child: Icon(
              icon,
                              color: Colors.white,
              size: 18,
            ),
          ),
          const SizedBox(height: 4),
                Text(
                  label,
            style: const TextStyle(
              fontSize: 11,
                              color: Colors.white,
                          ),
                        ),
                      ],
        ),
    );
  }

  Widget _buildEmptyTransactionState() {
    return Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                            children: [
          Icon(Icons.receipt_long, size: 80, color: Colors.grey.shade400),
                              const SizedBox(height: 16),
          Text(
            'No transactions yet',
            style: TextStyle(fontSize: 18, color: Colors.grey.shade600, fontWeight: FontWeight.bold),
                    ),
                      const SizedBox(height: 8),
                              Text(
            'Use the buttons below to add a transaction',
            style: TextStyle(fontSize: 14, color: Colors.grey.shade600),
                                textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  // Redesigned transaction list with ledger-style layout and improved styling
  Widget _buildTransactionList() {
    // Calculate running balance for each transaction
    double runningBalance = 0.0;
    
    // First, create a chronologically sorted copy (oldest first) for balance calculation
    final chronologicalTransactions = List<Map<String, dynamic>>.from(_filteredTransactions);
    chronologicalTransactions.sort((a, b) {
      final dateA = a['date'] as DateTime? ?? DateTime.now();
      final dateB = b['date'] as DateTime? ?? DateTime.now();
      return dateA.compareTo(dateB); // Ascending order (oldest first)
    });
    
    // Calculate running balances based on chronological order
    final Map<String, double> transactionBalances = {};
    
    for (final tx in chronologicalTransactions) {
      final amount = tx['amount'] as double? ?? 0.0;
      final isGet = tx['isGet'] as bool? ?? true;
      final id = tx['id'] as String? ?? '';
      
      // Update running balance based on transaction type
      if (isGet) {
        runningBalance += amount; // Credit increases balance
      } else {
        runningBalance -= amount; // Debit decreases balance
      }
      
      // Store the balance for this transaction ID
      transactionBalances[id] = runningBalance;
    }
    
    // Now create our display list with correct balances
    final transactionsWithBalance = _filteredTransactions.map((tx) {
      final id = tx['id'] as String? ?? '';
      final txWithBalance = Map<String, dynamic>.from(tx);
      
      // Get the pre-calculated balance for this transaction
      txWithBalance['runningBalance'] = transactionBalances[id] ?? 0.0;
      return txWithBalance;
    }).toList();

    return Column(
      children: [
        // Ledger header
        Container(
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
          decoration: BoxDecoration(
            color: Colors.grey.shade200,
            border: Border(
              bottom: BorderSide(color: Colors.grey.shade400, width: 1),
            ),
          ),
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.center,
          children: [
              // Date column (with space for icon)
              SizedBox(width: 90, 
                  child: Text(
                  'Date',
                  style: TextStyle(
                      fontWeight: FontWeight.bold,
                    fontSize: 13,
                    color: Colors.grey.shade800,
                    ),
                  ),
                ),
              
              // Vertical dotted line
              _buildDottedLine(),
              
              // Debit column
                Expanded(
                flex: 1,
                child: Align(
                  alignment: Alignment.centerRight,
                  child: Text(
                    'Debit',
                    style: TextStyle(
                          fontWeight: FontWeight.bold,
                      fontSize: 13,
                      color: Colors.red.shade700,
                    ),
                  ),
                ),
              ),
              
              // Vertical dotted line
              _buildDottedLine(),
              
              // Credit column
              Expanded(
                flex: 1,
                child: Align(
                  alignment: Alignment.centerRight,
                  child: Text(
                    'Credit',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      fontSize: 13,
                      color: Colors.green.shade700,
                    ),
                  ),
                ),
              ),
              
              // Vertical dotted line
              _buildDottedLine(),
              
              // Balance column
              Expanded(
                flex: 1,
                child: Align(
                  alignment: Alignment.centerRight,
                  child: Text(
                    'Balance',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      fontSize: 13,
                      color: Colors.blue.shade700,
                    ),
                  ),
                ),
          ),
        ],
      ),
        ),
        
        // Transaction list
        Expanded(
          child: ListView.builder(
            itemCount: transactionsWithBalance.length,
            padding: const EdgeInsets.only(bottom: 80), // Space for FABs
            itemBuilder: (context, index) {
              final transaction = transactionsWithBalance[index];
              final amount = transaction['amount'] as double? ?? 0.0;
              final isGet = transaction['isGet'] as bool? ?? true;
              final date = transaction['date'] as DateTime? ?? DateTime.now();
              final note = transaction['note'] as String? ?? '';
              final hasInterest = transaction['hasInterest'] as bool? ?? false;
              final runningBalance = transaction['runningBalance'] as double;
              
              // Get receipt images from both imagePath (legacy) and imagePaths (newer) fields
              List<String> receiptPaths = [];
              if (transaction.containsKey('imagePaths')) {
                final paths = transaction['imagePaths'];
                if (paths is List) {
                  receiptPaths = List<String>.from(paths);
                } else if (paths is String && paths.isNotEmpty) {
                  receiptPaths = [paths];
                }
              } else if (transaction.containsKey('imagePath')) {
                final path = transaction['imagePath'] as String?;
                if (path != null && path.isNotEmpty) {
                  receiptPaths = [path];
                }
              }
              
              // Format amounts with the Indian Rupee symbol
              final formattedAmount = '₹ ${amount.toStringAsFixed(2)}';
              final formattedBalance = runningBalance >= 0 
                  ? '₹ ${runningBalance.toStringAsFixed(2)}' 
                  : '₹ -${runningBalance.abs().toStringAsFixed(2)}';
              
              // Alternating row background for better readability
              final rowColor = index % 2 == 0 ? Colors.white : Colors.grey.shade50;
              
              return GestureDetector(
                onLongPress: () {
                  // Show context menu with edit/delete options
                  _showTransactionOptions(transaction);
                },
                child: Column(
                  children: [
                    // Main transaction row with ledger columns
                    Container(
                      color: rowColor,
                      padding: EdgeInsets.fromLTRB(12, 8, 12, note.isNotEmpty || receiptPaths.isNotEmpty ? 0 : 8),
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          // Date column with 45-degree arrow icon
                          SizedBox(
                            width: 90,
                            child: Row(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                // 45-degree arrow icon
                                Container(
                                  width: 24,
                                  height: 24,
                                  margin: const EdgeInsets.only(top: 2),
                      decoration: BoxDecoration(
                                    color: isGet 
                                        ? const Color(0xFFE8F5E9) 
                                        : const Color(0xFFFFEBEE),
                                    shape: BoxShape.circle,
                                  ),
                                  child: Center(
                                    child: Transform.rotate(
                                      angle: isGet ? -0.785 : 0.785, // 45 degrees in radians (π/4)
                                      child: Icon(
                                        isGet ? Icons.arrow_downward : Icons.arrow_upward,
                                        color: isGet 
                                            ? const Color(0xFF4CAF50) 
                                            : const Color(0xFFE57373),
                                        size: 14,
                                ),
                              ),
                            ),
                          ),
                            const SizedBox(width: 8),
                                
                                // Date and details in a column
                                Expanded(
                                  child: Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                                      // Date in format: 15 Jan 25 09:25 AM
                                      Text(
                                        DateFormat('dd MMM yy').format(date),
                                        style: TextStyle(
                                          fontSize: 12,
                                          fontWeight: FontWeight.w500,
                                          color: Colors.grey.shade800,
                                        ),
                                      ),
                                      // Time in 12-hour format with AM/PM
                                      Text(
                                        DateFormat('hh:mm a').format(date),
                                        style: TextStyle(
                                          fontSize: 10,
                                          color: Colors.grey.shade600,
                                        ),
                                      ),
                                      
                                      // Note if available - directly under the date
                                      if (note.isNotEmpty)
                                        Padding(
                                          padding: const EdgeInsets.only(top: 2),
                                          child: Text(
                                            note,
                      style: TextStyle(
                                              fontSize: 10,
                                              color: Colors.grey.shade700,
                                              fontStyle: FontStyle.italic,
                                            ),
                                            maxLines: 1,
                                            overflow: TextOverflow.ellipsis,
                                          ),
                                        ),
                                      
                                      // Interest badge if applicable
                                      if (hasInterest)
                                        Container(
                                          margin: const EdgeInsets.only(top: 2),
                                          padding: const EdgeInsets.symmetric(horizontal: 4, vertical: 1),
                                  decoration: BoxDecoration(
                                            color: const Color(0xFFE3F2FD),
                                            borderRadius: BorderRadius.circular(4),
                                          ),
                                          child: Text(
                                            'Interest',
                                            style: TextStyle(
                                              fontSize: 9,
                                              color: Colors.blue.shade700,
                                            ),
                                          ),
                                        ),
                                    ],
                                  ),
                                ),
                              ],
                            ),
                          ),
                          
                          // Vertical dotted line
                          _buildDottedLine(),
                          
                          // Debit column (show amount if it's a payment/debit)
                          Expanded(
                            flex: 1,
                            child: Align(
                              alignment: Alignment.centerRight,
                              child: !isGet 
                                  ? Text(
                                      formattedAmount,
                                      style: TextStyle(
                                        fontSize: 13,
                                        fontWeight: FontWeight.w500,
                                        color: Colors.red.shade700,
                                      ),
                                    )
                                  : const Text(''),
                            ),
                          ),
                          
                          // Vertical dotted line
                          _buildDottedLine(),
                          
                          // Credit column (show amount if it's a receipt/credit)
                          Expanded(
                            flex: 1,
                            child: Align(
                              alignment: Alignment.centerRight,
                              child: isGet 
                                  ? Text(
                                      formattedAmount,
                                      style: TextStyle(
                                        fontSize: 13,
                                        fontWeight: FontWeight.w500,
                                        color: Colors.green.shade700,
                                      ),
                                    )
                                  : const Text(''),
                            ),
                          ),
                          
                          // Vertical dotted line
                          _buildDottedLine(),
                          
                          // Balance column
                          Expanded(
                            flex: 1,
                            child: Align(
                              alignment: Alignment.centerRight,
                              child: Text(
                                formattedBalance,
                                style: TextStyle(
                                  fontSize: 13,
                                  fontWeight: FontWeight.w500,
                                  color: runningBalance >= 0 
                                      ? Colors.blue.shade700 
                                      : Colors.orange.shade800,
                                ),
                              ),
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                    
                    // Receipt preview if available
                    if (receiptPaths.isNotEmpty)
                      Container(
                        color: rowColor,
                        padding: const EdgeInsets.only(left: 44, right: 16, bottom: 8),
                        child: Row(
                          children: [
                            Container(
                              height: 40,
                              width: 40,
                              decoration: BoxDecoration(
                                borderRadius: BorderRadius.circular(4),
                                border: Border.all(color: Colors.grey.shade300),
                                image: DecorationImage(
                                  image: FileImage(File(receiptPaths.first)),
                                  fit: BoxFit.cover,
                                  onError: (_, __) {},
                                ),
                              ),
                            ),
                            const SizedBox(width: 8),
                            Text(
                              receiptPaths.length > 1 
                                  ? '${receiptPaths.length} receipts attached' 
                                  : 'Receipt attached',
                              style: TextStyle(
                                fontSize: 10,
                                color: Colors.grey.shade600,
                              ),
                            ),
                          ],
                        ),
                      ),
                    
                    // Divider between transaction rows
                    Divider(height: 1, color: Colors.grey.shade300),
                  ],
              ),
            );
          },
          ),
        ),
      ],
    );
  }
  
  // Method to update a transaction
  void _updateTransaction(
    String id,
    double amount,
    bool isGet,
    String note,
    bool hasInterest,
    double interestRate,
    String interestPeriod,
    DateTime dueDate,
    List<String> imagePaths,
    bool isPayingInterest,
    int tenureMonths,
  ) {
    final transactionProvider = Provider.of<TransactionProvider>(context, listen: false);
    final phone = widget.contact['phone'] as String? ?? '';
    
    if (phone.isEmpty || id.isEmpty) return;
    
    // Create updated transaction map
    final Map<String, dynamic> updatedTransaction = {
      'id': id,
      'amount': amount,
      'isGet': isGet,
      'note': note,
      'hasInterest': hasInterest,
      'interestRate': hasInterest ? interestRate : 0.0,
      'interestPeriod': interestPeriod,
      'tenureMonths': tenureMonths ?? 3, // Default to 3 months if not specified
      'dueDate': dueDate,
      'imagePaths': imagePaths, // Changed to store a list
      'isPayingInterest': isPayingInterest,
    };
    
    // If this is an interest payment related to another transaction, add that reference
    Map<String, dynamic>? relatedTx;
    if (isPayingInterest && _transactions.isNotEmpty) {
      // Try to find the transaction this interest payment relates to
      // This is just a placeholder - in a real app, you would have a proper way to select the related transaction
      relatedTx = _transactions.firstWhere(
        (tx) => tx['hasInterest'] == true && tx['id'] != id,
        orElse: () => <String, dynamic>{},
      );
      
      if (relatedTx.isNotEmpty) {
        updatedTransaction['relatedTransactionId'] = relatedTx['id'];
        
        // You could add a note mentioning which transaction this interest is for
        if (note.isEmpty) {
          final relatedAmount = relatedTx['amount'] as double? ?? 0.0;
          updatedTransaction['note'] = 'Interest payment for transaction of ₹${relatedAmount.toStringAsFixed(2)}';
        }
      }
    }
    
    // Add transaction to provider
    transactionProvider.addTransaction(phone, updatedTransaction);
    
    // Refresh transactions
    _loadTransactions();
    
    // Show success message
      ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Transaction of ₹${amount.toStringAsFixed(2)} added')),
    );
  }
  
  void _confirmDeleteTransaction(Map<String, dynamic> transaction) {
    final id = transaction['id'] as String? ?? '';
    if (id.isEmpty) return;
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Delete Transaction'),
        content: const Text('Are you sure you want to delete this transaction? This action cannot be undone.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              _deleteTransaction(id);
            },
            child: const Text('Delete', style: TextStyle(color: Colors.red)),
          ),
        ],
      ),
    );
  }

  void _deleteTransaction(String id) {
    final transactionProvider = Provider.of<TransactionProvider>(context, listen: false);
    final phone = widget.contact['phone'] as String? ?? '';
    
    if (phone.isEmpty) return;
    
    // Delete transaction from provider
    transactionProvider.deleteTransaction(phone, id);
    
    // Refresh transactions
    _loadTransactions();
    
    // Show success message
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Transaction deleted successfully')),
    );
  }
  
  void _editContact() {
    final nameController = TextEditingController(text: widget.contact['name'] as String? ?? '');
    final phoneController = TextEditingController(text: widget.contact['phone'] as String? ?? '');
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Edit Contact'),
        content: Column(
                            mainAxisSize: MainAxisSize.min,
                            children: [
            TextField(
              controller: nameController,
              decoration: const InputDecoration(
                labelText: 'Name',
                border: OutlineInputBorder(),
                                ),
                              ),
                              const SizedBox(height: 16),
            TextField(
              controller: phoneController,
              keyboardType: TextInputType.phone,
              decoration: const InputDecoration(
                labelText: 'Phone (Optional)',
                border: OutlineInputBorder(),
                                          ),
                                        ),
                                      ],
                                    ),
        actions: [
                              TextButton(
                                onPressed: () => Navigator.pop(context),
                                child: const Text('Cancel'),
                              ),
          TextButton(
            onPressed: () {
              if (nameController.text.trim().isEmpty) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('Name is required')),
                );
                return;
              }
              
              _updateContact(
                nameController.text.trim(),
                phoneController.text.trim(),
              );
              
              Navigator.pop(context);
            },
            child: const Text('Save'),
          ),
        ],
      ),
    );
  }

  void _updateContact(String name, String phone) {
    final transactionProvider = Provider.of<TransactionProvider>(context, listen: false);
    final currentPhone = widget.contact['phone'] as String? ?? '';
    
    // Create updated contact map
    final Map<String, dynamic> updatedContact = Map.from(widget.contact);
    updatedContact['name'] = name;
    
    // Handle phone number change
    if (phone != currentPhone) {
      // If phone is changing, need to handle transactions
      if (currentPhone.isNotEmpty) {
        transactionProvider.updateContactPhone(currentPhone, phone.isEmpty ? 'manual_${DateTime.now().millisecondsSinceEpoch}' : phone);
      }
      updatedContact['phone'] = phone.isEmpty ? 'manual_${DateTime.now().millisecondsSinceEpoch}' : phone;
    }
    
    // Update contact in provider
    transactionProvider.updateContact(updatedContact);
    
    // Refresh data
    _loadTransactions();
        
        // Show success message
          ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('$name updated successfully')),
    );
  }
  
  void _confirmDeleteContact() {
    final name = widget.contact['name'] as String? ?? 'Unknown';
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Delete Contact'),
        content: Text('Are you sure you want to delete $name and all associated transactions?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              _deleteContact();
            },
            child: const Text('Delete', style: TextStyle(color: Colors.red)),
          ),
        ],
      ),
    );
  }
  
  void _deleteContact() {
      final transactionProvider = Provider.of<TransactionProvider>(context, listen: false);
    final phone = widget.contact['phone'] as String? ?? '';
    
    if (phone.isNotEmpty) {
      // Delete contact and all associated transactions
      transactionProvider.deleteContact(phone);
      
      // Show success message
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Contact deleted')),
      );
      
      // Navigate back
      Navigator.pop(context);
    }
  }
  
  // Add missing methods
  void _makeCall() {
    final phone = widget.contact['phone'] as String? ?? '';
    
    if (phone.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('No phone number available')),
      );
      return;
    }
    
    launchUrl(Uri.parse('tel:$phone'));
  }
  
  void _generatePdfReport() {
    // Implement PDF report generation functionality
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('PDF report generation coming soon')),
    );
  }
  
  void _setReminder() {
    // Implement reminder setting functionality
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Reminder setting coming soon')),
    );
  }
  
  void _sendSms() {
    final phone = widget.contact['phone'] as String? ?? '';
    
    if (phone.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('No phone number available')),
      );
      return;
    }
    
    launchUrl(Uri.parse('sms:$phone'));
  }

  // Build filter chip
  Widget _buildFilterChip(String filterName) {
    final isSelected = _selectedFilter == filterName;
    
    Color chipColor;
    Color textColor;
    
    if (isSelected) {
      switch (filterName) {
        case 'Received':
          chipColor = Colors.green.shade100;
          textColor = Colors.green.shade700;
            break;
        case 'Paid':
          chipColor = Colors.red.shade100;
          textColor = Colors.red.shade700;
          break;
        default: // 'All'
          chipColor = Colors.blue.shade100;
          textColor = Colors.blue.shade700;
        }
      } else {
      chipColor = Colors.grey.shade200;
      textColor = Colors.grey.shade700;
    }
    
    return GestureDetector(
      onTap: () => _selectFilter(filterName),
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
        decoration: BoxDecoration(
          color: chipColor,
          borderRadius: BorderRadius.circular(20),
          border: Border.all(
            color: isSelected 
                ? chipColor 
                : Colors.grey.shade300,
            width: 1,
          ),
        ),
        child: Text(
          filterName,
          style: TextStyle(
            fontSize: 12,
            fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
            color: textColor,
          ),
        ),
      ),
    );
  }

  // Add _buildDottedLine method
  Widget _buildDottedLine() {
    return Container(
      height: 20,
      width: 1,
      margin: const EdgeInsets.symmetric(horizontal: 4),
      decoration: BoxDecoration(
        border: Border(
          left: BorderSide(
            color: Colors.grey.shade400,
            width: 1,
            style: BorderStyle.solid,
          ),
        ),
      ),
    );
  }

  // Add showTransactionDialog method
  void _showTransactionDialog(bool isGet) {
    final amountController = TextEditingController();
    final noteController = TextEditingController();
    bool hasInterest = _showInterestMode;
    bool isPayingInterest = false;
    double interestRate = 0.0;
    String interestPeriod = 'Month';
    DateTime localDueDate = DateTime.now().add(const Duration(days: 90));
    List<String> imagePaths = [];
    
    // For selecting transaction when paying interest
    Map<String, dynamic>? selectedTransaction;
    List<Map<String, dynamic>> eligibleTransactions = [];
    
    // Filter eligible transactions (only normal transactions)
    if (isGet) {
      eligibleTransactions = _transactions.where((tx) => 
        !(tx['hasInterest'] as bool? ?? false) && 
        !(tx['isGet'] as bool? ?? true)
      ).toList();
    } else {
      eligibleTransactions = _transactions.where((tx) => 
        !(tx['hasInterest'] as bool? ?? false) && 
        (tx['isGet'] as bool? ?? true)
      ).toList();
    }
    
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => StatefulBuilder(
        builder: (context, setState) => Container(
          height: MediaQuery.of(context).size.height * 0.65,
          padding: EdgeInsets.zero,
          decoration: const BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.only(
              topLeft: Radius.circular(20),
              topRight: Radius.circular(20),
            ),
          ),
          child: Column(
        children: [
              // Handle indicator at top
              Container(
                width: 40,
                height: 5,
                margin: const EdgeInsets.only(top: 8, bottom: 6),
                decoration: BoxDecoration(
                  color: Colors.grey.shade300,
                  borderRadius: BorderRadius.circular(5),
                ),
              ),
              
              // Main content in scrollable area
          Expanded(
                child: SingleChildScrollView(
                  padding: const EdgeInsets.fromLTRB(12, 4, 12, 0),
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Header row with Paid/Received indicator
                      Row(
                        children: [
                          // Paid/Received indicator
                          CircleAvatar(
                            radius: 16,
                            backgroundColor: isGet ? Colors.green.shade100 : Colors.red.shade100,
                            child: Icon(
                              isGet ? Icons.arrow_downward : Icons.arrow_upward,
                              color: isGet ? Colors.green : Colors.red,
                              size: 16,
                            ),
                          ),
                          const SizedBox(width: 6),
                          Text(
                            isGet ? 'Received' : 'Paid',
                            style: TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                              color: isGet ? Colors.green : Colors.red,
                            ),
                          ),
                        ],
                      ),

                      const SizedBox(height: 12),
                      
                      // Amount section
                      const Text(
                        'Amount',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 14,
                        ),
                      ),
                      const SizedBox(height: 4),
                      
                      // Amount and date in one row
                      Row(
                        children: [
                          // Amount field
                          Expanded(
                            flex: 3,
      child: TextField(
                              controller: amountController,
                              keyboardType: TextInputType.numberWithOptions(decimal: true),
                              decoration: InputDecoration(
                                hintText: '0.00',
                                prefixText: '₹ ',
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(8),
                                ),
                                contentPadding: const EdgeInsets.symmetric(horizontal: 10, vertical: 12),
                                isDense: true,
                              ),
                            ),
                          ),
                          const SizedBox(width: 6),
                          
                          // Date picker
                          Expanded(
                            flex: 2,
      child: InkWell(
                              onTap: () async {
                                final date = await showDatePicker(
                                  context: context,
                                  initialDate: DateTime.now(),
                                  firstDate: DateTime(2020),
                                  lastDate: DateTime(2030),
                                );
                                if (date != null && mounted) {
                                  setState(() {
                                    localDueDate = date;
                                  });
                                }
                              },
        child: Container(
                                padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 10),
          decoration: BoxDecoration(
                                  border: Border.all(color: Colors.grey.shade300),
                                  borderRadius: BorderRadius.circular(8),
          ),
          child: Row(
            children: [
                                    Icon(Icons.calendar_today, size: 12, color: Colors.grey.shade600),
                                    const SizedBox(width: 2),
                                    Flexible(
                                      child: Text(
                                        DateFormat('dd MMM yyyy').format(localDueDate),
                                        style: TextStyle(color: Colors.grey.shade700, fontSize: 12),
                                        overflow: TextOverflow.ellipsis,
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),
                      
                      const SizedBox(height: 12),
                      
                      // Normal/Interest toggle
                      if (!isPayingInterest) 
                        Container(
                          decoration: BoxDecoration(
                            color: Colors.grey.shade200,
                            borderRadius: BorderRadius.circular(20),
                          ),
                          child: Row(
                            children: [
                              Expanded(
                                child: GestureDetector(
                                  onTap: () => setState(() => hasInterest = false),
                                  child: Container(
                                    padding: const EdgeInsets.symmetric(vertical: 8),
                                    alignment: Alignment.center,
                                    decoration: BoxDecoration(
                                      color: !hasInterest ? Colors.blue : Colors.transparent,
                                      borderRadius: BorderRadius.circular(20),
                                    ),
                child: Text(
                                      'Normal',
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                                        fontSize: 13,
                                        color: !hasInterest ? Colors.white : Colors.black,
                  ),
                ),
              ),
                                ),
                              ),
                              Expanded(
                                child: GestureDetector(
                                  onTap: () => setState(() => hasInterest = true),
                                  child: Container(
                                    padding: const EdgeInsets.symmetric(vertical: 8),
                                    alignment: Alignment.center,
                                    decoration: BoxDecoration(
                                      color: hasInterest ? Colors.blue : Colors.transparent,
                                      borderRadius: BorderRadius.circular(20),
                                    ),
                                    child: Text(
                                      'Interest',
                                      style: TextStyle(
                                        fontWeight: FontWeight.bold,
                                        fontSize: 13,
                                        color: hasInterest ? Colors.white : Colors.black,
                                      ),
                                    ),
                                  ),
                  ),
                ),
              ],
            ),
                        ),
                      
                      // Show interest settings when interest is selected
                      if (hasInterest && !isPayingInterest) ...[
                        const SizedBox(height: 12),
                        
                        // Interest Rate field with Period switcher (70:30 ratio)
                        const Text(
                          'Interest Rate (%)',
                          style: TextStyle(
            fontWeight: FontWeight.bold,
                            fontSize: 14,
                          ),
                        ),
                        const SizedBox(height: 4),
                        Row(
                          children: [
                            // Interest Rate field (70%)
                            Expanded(
                              flex: 7,
                              child: TextField(
                                keyboardType: TextInputType.numberWithOptions(decimal: true),
                                decoration: InputDecoration(
                                  hintText: '0.00',
                                  suffixText: '%',
                                  border: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(8),
                                  ),
                                  contentPadding: const EdgeInsets.symmetric(horizontal: 10, vertical: 12),
                                  isDense: true,
                                ),
                                onChanged: (value) {
                                  interestRate = double.tryParse(value) ?? 0.0;
                                },
                              ),
                            ),
                            const SizedBox(width: 6),
                            
                            // Period switcher (30%)
                            Expanded(
                              flex: 3,
                              child: Container(
                                height: 42,
                                decoration: BoxDecoration(
                                  color: Colors.grey.shade200,
                                  borderRadius: BorderRadius.circular(8),
                                  border: Border.all(color: Colors.grey.shade300),
                                ),
                                child: Row(
            children: [
                                    // Month option
                                    Expanded(
                                      child: GestureDetector(
                                        onTap: () => setState(() => interestPeriod = 'Month'),
                                        child: Container(
                                          alignment: Alignment.center,
                                          decoration: BoxDecoration(
                                            color: interestPeriod == 'Month' ? Colors.blue : Colors.transparent,
                                            borderRadius: BorderRadius.circular(7),
                                          ),
                                          child: Text(
                                            'M',
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                                              fontSize: 12,
                                              color: interestPeriod == 'Month' ? Colors.white : Colors.black,
                ),
              ),
                ),
              ),
                                    ),
                                    // Year option
                  Expanded(
                    child: GestureDetector(
                                        onTap: () => setState(() => interestPeriod = 'Year'),
                      child: Container(
                                          alignment: Alignment.center,
                        decoration: BoxDecoration(
                                            color: interestPeriod == 'Year' ? Colors.blue : Colors.transparent,
                                            borderRadius: BorderRadius.circular(7),
                                          ),
                                          child: Text(
                                            'Y', 
                                            style: TextStyle(
                                              fontWeight: FontWeight.bold,
                                              fontSize: 12,
                                              color: interestPeriod == 'Year' ? Colors.white : Colors.black,
                                            ),
                                          ),
                                        ),
                                      ),
                                ),
                              ],
                            ),
                              ),
                            ),
                          ],
                        ),
                        
                            const SizedBox(height: 12),
                        
                        // Row with Note and Attachments - 75:25 ratio
                            const SizedBox(height: 12),
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          // Note section (75%)
                          Expanded(
                            flex: 75,
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                            const Text(
                                  'Note (optional)',
                              style: TextStyle(
                                fontWeight: FontWeight.bold,
                                    fontSize: 14,
                                  ),
                                ),
                                const SizedBox(height: 4),
                                TextField(
                                  controller: noteController,
                                  decoration: InputDecoration(
                                    hintText: 'Add a note...',
                                    hintStyle: TextStyle(fontSize: 13),
                                    border: OutlineInputBorder(
                                      borderRadius: BorderRadius.circular(8),
                                    ),
                                    contentPadding: const EdgeInsets.symmetric(horizontal: 10, vertical: 10),
                                    isDense: true,
                                  ),
                                  style: TextStyle(fontSize: 13),
                                  maxLines: 3,
                                ),
                              ],
                            ),
                          ),
                          
                          const SizedBox(width: 8),
                          
                          // Attach Receipt/Bill section (25%)
                          Expanded(
                            flex: 25,
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                            const Text(
                                  'Receipts',
                              style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    fontSize: 14,
                                  ),
                                ),
                                const SizedBox(height: 4),
                                GestureDetector(
                                  onTap: () async {
                                    try {
                                      final imagePickerHelper = ImagePickerHelper();
                                      final selectedImage = await imagePickerHelper.showImageSourceDialog(context);
                                      if (selectedImage != null && mounted) {
                                        setState(() {
                                          imagePaths.add(selectedImage.path);
                                        });
                                      }
                                    } catch (e) {
                                      print('Error picking image: $e');
                                      if (mounted) {
                                        ScaffoldMessenger.of(context).showSnackBar(
                                          SnackBar(content: Text('Failed to get image: $e')),
                                        );
                                      }
                                    }
                                  },
                                  child: Container(
                                    width: double.infinity,
                                    height: 70,
                                    decoration: BoxDecoration(
                                      border: Border.all(color: Colors.grey.shade300),
                                      borderRadius: BorderRadius.circular(8),
                                    ),
                                    child: Column(
                                      mainAxisAlignment: MainAxisAlignment.center,
                                      children: [
                                        Icon(Icons.add_photo_alternate, size: 20, color: Colors.grey),
                                        const SizedBox(height: 2),
                                        Text(
                                          'Add receipt',
                                          style: TextStyle(color: Colors.grey, fontSize: 11),
                                        ),
                                      ],
                                    ),
                                  ),
              ),
            ],
          ),
        ),
                        ],
                      ),
                      
                      // Preview of attached images
                      if (imagePaths.isNotEmpty) ...[
                        const SizedBox(height: 8),
                        SizedBox(
                          height: 70,
                          child: ListView.builder(
                            scrollDirection: Axis.horizontal,
                            itemCount: imagePaths.length,
                            itemBuilder: (context, index) {
    return Container(
                                width: 70,
                                height: 70,
                                margin: const EdgeInsets.only(right: 8),
      decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(8),
                                  border: Border.all(color: Colors.grey.shade300),
      ),
                                child: Stack(
        children: [
                                    // Image preview
                                    ClipRRect(
                                      borderRadius: BorderRadius.circular(7),
                                      child: Image.file(
                                        File(imagePaths[index]),
                                        width: 70,
                                        height: 70,
                                        fit: BoxFit.cover,
                                      ),
                                    ),
                                    // Delete button
                                    Positioned(
                                      top: 0,
                                      right: 0,
                                      child: GestureDetector(
                                        onTap: () {
                                          setState(() {
                                            imagePaths.removeAt(index);
                                          });
                                        },
                                        child: Container(
                                          padding: const EdgeInsets.all(2),
                                          decoration: BoxDecoration(
                                            color: Colors.red,
                                            shape: BoxShape.circle,
                                          ),
                                          child: const Icon(Icons.close, size: 12, color: Colors.white),
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                              );
                            },
                          ),
                        ),
                      ],
                      
                      // "Are you paying interest?" toggle
          const SizedBox(height: 8),
          Row(
            children: [
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      isGet ? 'Are you receiving interest?' : 'Are you paying interest?',
                      style: TextStyle(
                        fontSize: 13,
                        fontWeight: FontWeight.w500,
                        color: Colors.grey.shade700,
                      ),
                    ),
                    Text(
                      isGet 
                          ? 'Enable if you want to receive interest on ongoing loan amount as a lender'
                          : 'Enable if you are paying interest on a loan you have taken',
                      style: TextStyle(
                        fontSize: 11,
                        color: Colors.grey.shade500,
                        fontStyle: FontStyle.italic,
                      ),
                    ),
                  ],
                ),
              ),
              Transform.scale(
                scale: 0.8,
                child: Switch(
                  value: isPayingInterest,
                  onChanged: (value) {
                    setState(() {
                      isPayingInterest = value;
                      if (value) {
                        hasInterest = false;
                      }
                    });
                  },
                  activeColor: Colors.deepPurple,
                ),
              ),
            ],
          ),
                      
                      const SizedBox(height: 8),
                      
                      // Bottom buttons
                      Row(
                        children: [
                          Expanded(
                            child: TextButton(
                              onPressed: () => Navigator.pop(context),
                              style: TextButton.styleFrom(
                                padding: const EdgeInsets.symmetric(vertical: 6),
                              ),
                              child: const Text('Cancel', style: TextStyle(fontSize: 13)),
                            ),
                          ),
                          const SizedBox(width: 8),
                          Expanded(
                            child: ElevatedButton(
                              onPressed: () {
                                if (amountController.text.isEmpty) {
                                  ScaffoldMessenger.of(context).showSnackBar(
                                    const SnackBar(content: Text('Please enter an amount')),
                                  );
        return;
                                }
                                
                                final amount = double.tryParse(amountController.text) ?? 0.0;
                                if (amount <= 0) {
                                  ScaffoldMessenger.of(context).showSnackBar(
                                    const SnackBar(content: Text('Amount must be greater than 0')),
                                  );
                                  return;
                                }
                                
                                _addTransaction(
                                  amount,
                                  isGet,
                                  noteController.text,
                                  isPayingInterest || hasInterest,
                                  interestRate,
                                  interestPeriod,
                                  localDueDate,
                                  imagePaths,
                                  isPayingInterest,
                                  selectedTransaction,
                                );
                                
                                Navigator.pop(context);
                              },
                              style: ElevatedButton.styleFrom(
                                padding: const EdgeInsets.symmetric(vertical: 6),
                                backgroundColor: const Color(0xFF6750A4),
                              ),
                              child: const Text('Save', style: TextStyle(fontSize: 13)),
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
              ),
            ),
          );
  }
  
  // Add methods for showing transaction options on long press
  void _showTransactionOptions(Map<String, dynamic> transaction) {
    showModalBottomSheet(
      context: context,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) => Container(
        padding: const EdgeInsets.symmetric(vertical: 20),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
            // Transaction details at the top
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 24),
              child: Row(
                children: [
                  // Transaction icon
                  Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: (transaction['isGet'] as bool? ?? true)
                          ? Colors.green.shade100
                          : Colors.red.shade100,
                      shape: BoxShape.circle,
                    ),
                    child: Icon(
                      (transaction['isGet'] as bool? ?? true)
                          ? Icons.arrow_downward
                          : Icons.arrow_upward,
                      color: (transaction['isGet'] as bool? ?? true)
                          ? Colors.green
                          : Colors.red,
                      size: 20,
                    ),
                  ),
                  const SizedBox(width: 16),
                  // Transaction amount and date
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          '₹ ${(transaction['amount'] as double? ?? 0.0).toStringAsFixed(2)}',
                          style: const TextStyle(
                            fontWeight: FontWeight.bold,
                            fontSize: 18,
                          ),
                        ),
                        Text(
                          DateFormat('dd MMM yyyy, hh:mm a')
                              .format(transaction['date'] as DateTime? ?? DateTime.now()),
                          style: TextStyle(
                            color: Colors.grey.shade600,
                            fontSize: 14,
                          ),
                ),
              ],
            ),
          ),
                ],
              ),
            ),
            const SizedBox(height: 20),
            const Divider(),
            // Edit option
            ListTile(
              leading: const Icon(Icons.edit, color: Colors.blue),
              title: const Text('Edit Transaction'),
              onTap: () {
                Navigator.pop(context);
                // Placeholder for edit functionality
                // You would implement proper edit functionality here
                  ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('Edit functionality coming soon')),
                );
              },
            ),
            // Delete option
            ListTile(
              leading: const Icon(Icons.delete, color: Colors.red),
              title: const Text('Delete Transaction'),
              onTap: () {
                Navigator.pop(context);
                _confirmDeleteTransaction(transaction);
              },
            ),
          ],
        ),
      ),
    );
  }
  
  // Edit transaction method
  void _editTransaction(Map<String, dynamic> transaction) {
    final id = transaction['id'] as String? ?? '';
    final isGet = transaction['isGet'] as bool? ?? true;
    
    if (id.isEmpty) return;
    
    // Create controllers with initial values from transaction
    final amountController = TextEditingController(
      text: (transaction['amount'] as double? ?? 0.0).toStringAsFixed(2)
    );
    final noteController = TextEditingController(
      text: transaction['note'] as String? ?? ''
    );
    
    // Initialize variables with values from transaction
    bool hasInterest = transaction['hasInterest'] as bool? ?? false;
    double interestRate = transaction['interestRate'] as double? ?? 0.0;
    String interestPeriod = transaction['interestPeriod'] as String? ?? 'Month';
    DateTime dueDate = transaction['dueDate'] as DateTime? ?? DateTime.now().add(const Duration(days: 90));
    DateTime transactionDate = transaction['date'] as DateTime? ?? DateTime.now();
    
    // Get image paths from transaction
    List<String> imagePaths = [];
    if (transaction.containsKey('imagePaths')) {
      final paths = transaction['imagePaths'];
      if (paths is List) {
        imagePaths = List<String>.from(paths);
      } else if (paths is String && paths.isNotEmpty) {
        imagePaths = [paths];
      }
    } else if (transaction.containsKey('imagePath')) {
      final path = transaction['imagePath'] as String?;
      if (path != null && path.isNotEmpty) {
        imagePaths = [path];
      }
    }
    
    // Reuse most of _showTransactionDialog's UI but pre-fill with transaction data
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => StatefulBuilder(
        builder: (context, setState) => Container(
          height: MediaQuery.of(context).size.height * 0.65,
          decoration: const BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.only(
              topLeft: Radius.circular(20),
              topRight: Radius.circular(20),
            ),
          ),
      child: Column(
        children: [
              // Handle indicator at top
              Container(
                width: 40,
                height: 5,
                margin: const EdgeInsets.only(top: 8, bottom: 6),
                decoration: BoxDecoration(
            color: Colors.grey.shade300,
                  borderRadius: BorderRadius.circular(5),
                ),
              ),
              
              // Main content in scrollable area
              Expanded(
                child: ListView(
                  padding: const EdgeInsets.fromLTRB(12, 4, 12, 0),
                  children: [
                    // Header with Edit Transaction title
                    Row(
                      children: [
                        CircleAvatar(
                          radius: 16,
                          backgroundColor: isGet ? Colors.green.shade100 : Colors.red.shade100,
                          child: Icon(
                            isGet ? Icons.arrow_downward : Icons.arrow_upward,
                            color: isGet ? Colors.green : Colors.red,
                            size: 16,
                          ),
                        ),
                        const SizedBox(width: 8),
                        Text(
                          'Edit ${isGet ? 'Received' : 'Paid'} Transaction',
                          style: const TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                    ),
                    
          const SizedBox(height: 16),
                    
                    // Amount field
          const Text(
                      'Amount',
            style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 14,
                      ),
                    ),
                    const SizedBox(height: 4),
                    TextField(
                      controller: amountController,
                      keyboardType: const TextInputType.numberWithOptions(decimal: true),
                      decoration: InputDecoration(
                        hintText: '0.00',
                        prefixText: '₹ ',
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                      ),
                    ),
                    
                    const SizedBox(height: 16),
                    
                    // Note field
                    const Text(
                      'Note (optional)',
              style: TextStyle(
                        fontWeight: FontWeight.bold,
                fontSize: 14,
                      ),
                    ),
                    const SizedBox(height: 4),
                    TextField(
                      controller: noteController,
                      decoration: InputDecoration(
                        hintText: 'Add a note...',
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                      ),
                      maxLines: 3,
                    ),
                    
                    const SizedBox(height: 16),
                    
                    // Date picker
                    const Text(
                      'Transaction Date',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 14,
                      ),
                    ),
                    const SizedBox(height: 4),
                    InkWell(
                      onTap: () async {
                        final date = await showDatePicker(
                          context: context,
                          initialDate: transactionDate,
                          firstDate: DateTime(2020),
                          lastDate: DateTime(2030),
                        );
                        if (date != null && mounted) {
                  setState(() {
                            transactionDate = date;
                          });
                        }
                      },
                      child: Container(
                        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 12),
                        decoration: BoxDecoration(
                          border: Border.all(color: Colors.grey.shade300),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: Row(
                          children: [
                            Icon(Icons.calendar_today, size: 16, color: Colors.grey.shade600),
                            const SizedBox(width: 8),
                            Text(
                              DateFormat('dd MMM yyyy').format(transactionDate),
                              style: const TextStyle(fontSize: 14),
                            ),
                          ],
                        ),
                      ),
                    ),
                    
                    const SizedBox(height: 24),
                    
                    // Bottom buttons
                    Row(
                      children: [
                        Expanded(
                          child: TextButton(
                            onPressed: () => Navigator.pop(context),
                            child: const Text('Cancel'),
                          ),
                        ),
                        const SizedBox(width: 8),
                        Expanded(
                          child: ElevatedButton(
                            onPressed: () {
                              final amount = double.tryParse(amountController.text);
                              if (amount == null || amount <= 0) {
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(content: Text('Please enter a valid amount')),
                                );
                                return;
                              }
                              
                              // Update the transaction
                              final phone = widget.contact['phone'] as String? ?? '';
                              if (phone.isEmpty) return;
                              
                              // Create updated transaction
                              final updatedTransaction = Map<String, dynamic>.from(transaction);
                              updatedTransaction['amount'] = amount;
                              updatedTransaction['note'] = noteController.text;
                              updatedTransaction['date'] = transactionDate;
                              updatedTransaction['hasInterest'] = hasInterest;
                              updatedTransaction['interestRate'] = interestRate;
                              updatedTransaction['interestPeriod'] = interestPeriod;
                              updatedTransaction['tenureMonths'] = 3;
                              updatedTransaction['dueDate'] = DateTime.now().add(const Duration(days: 90));
                              updatedTransaction['imagePaths'] = imagePaths;
                              
                              // Find index of the transaction
                              final index = _transactions.indexWhere((tx) => tx['id'] == id);
                              
                              // Update in provider
                              if (index != -1) {
                                final transactionProvider = Provider.of<TransactionProvider>(context, listen: false);
                                transactionProvider.updateTransaction(phone, index, updatedTransaction);
                                
                                // Refresh transactions
                                _loadTransactions();
                                
                                // Show success message and close
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(content: Text('Transaction updated successfully')),
                                );
                                Navigator.pop(context);
              }
            },
            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.deepPurple,
                            ),
                            child: const Text('Save Changes'),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
  
  // Add missing _addTransaction method
  void _addTransaction(
    double amount,
    bool isGet,
    String note,
    bool hasInterest,
    double interestRate,
    String interestPeriod,
    DateTime dueDate,
    List<String> imagePaths,
    bool isPayingInterest,
    [Map<String, dynamic>? relatedTransaction,
    int? tenureMonths]
  ) {
    final transactionProvider = Provider.of<TransactionProvider>(context, listen: false);
    final phone = widget.contact['phone'] as String? ?? '';
    
    if (phone.isEmpty) return;
    
    // Create transaction map
    final Map<String, dynamic> newTransaction = {
      'id': DateTime.now().millisecondsSinceEpoch.toString(),
      'amount': amount,
      'isGet': isGet,
      'date': DateTime.now(),
      'note': note,
      'hasInterest': hasInterest,
      'interestRate': hasInterest ? interestRate : 0.0,
      'interestPeriod': interestPeriod,
      'tenureMonths': tenureMonths ?? 3, // Default to 3 months if not specified
      'dueDate': dueDate,
      'imagePaths': imagePaths,
      'isPayingInterest': isPayingInterest,
    };
    
    // If this is an interest payment related to another transaction, add that reference
    if (isPayingInterest && relatedTransaction != null) {
      newTransaction['relatedTransactionId'] = relatedTransaction['id'];
      
      // Add a note mentioning which transaction this interest is for
      if (note.isEmpty) {
        final relatedAmount = relatedTransaction['amount'] as double? ?? 0.0;
        newTransaction['note'] = 'Interest payment for transaction of ₹${relatedAmount.toStringAsFixed(2)}';
      }
    }
    
    // Add transaction to provider
    transactionProvider.addTransaction(phone, newTransaction);
    
    // Refresh transactions
    _loadTransactions();
    
    // Show success message
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Transaction of ₹${amount.toStringAsFixed(2)} added')),
    );
  }
}